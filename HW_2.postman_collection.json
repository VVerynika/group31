{
	"info": {
		"_postman_id": "0d4d2ead-e97c-443e-bd67-4bfeb211adac",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21801132"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "Http://162.55.220.72:5005/first",
					"protocol": "Http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить responce body в json\r",
							"let Jdata = JSON.parse (responseBody);\r",
							"console.log (\"Jdata:\", Jdata)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name Via\", function () {\r",
							"    var peremen = pm.response.json();\r",
							"    pm.expect(peremen.name).to.eql(\"Via\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age 32\", function () {\r",
							"    var peremen2 = pm.response.json();\r",
							"    pm.expect(peremen2.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary 5000\", function () {\r",
							"    var peremen3 = pm.response.json();\r",
							"    pm.expect(peremen3.salary).to.eql(+\"5000\");\r",
							"});\r",
							"\r",
							"//Спарсить request.\r",
							"let jsonData = pm.response.json();\r",
							"let reqData = request.data\r",
							"let req_name = reqData.name\r",
							"let req_age = reqData.age\r",
							"let req_salary = reqData.salary\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name Via\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age 32\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary 5000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(\"family\")\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req3 = request.data\r",
							"let req3_u_salary_1_5_year = req3.salary * 4\r",
							"\r",
							"pm.test(\"salary15y\", function () {\r",
							"    var perem = pm.response.json();\r",
							"    pm.expect(perem.family.u_salary_1_5_year).to.eql(req3_u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Via",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let resp_data_json = pm.response.json();\r",
							"//let jsonData = JSON.parse(responseBody)\r",
							"\r",
							"//Спарсить request.\r",
							"var req_data_json = pm.request.url.query.toObject()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = resp_data_json.name;\r",
							"let req_name = req_data_json.name;\r",
							"\r",
							"pm.test(\"Check resp_name = req_name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let resp_age = resp_data_json.age;\r",
							"let req_age = req_data_json.age;\r",
							"\r",
							"pm.test(\"Check resp_age = req_age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let resp_salary = resp_data_json.salary;\r",
							"let req_salary = +req_data_json.salary;\r",
							"\r",
							"pm.test(\"Check resp_salary = req_salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(resp_data_json.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Check dog have name\", function () {\r",
							"    pm.expect(resp_data_json.family.pets.dog.name).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Check dog have age\", function () {\r",
							"    pm.expect(resp_data_json.family.pets.dog.age).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check  name have Luky\", function () {\r",
							"    pm.expect(resp_data_json.family.pets.dog.name).to.have.string('Luky');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(resp_data_json.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Via",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Via&age=32&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Via"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let resp_body = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req_body = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = resp_body.name;\r",
							"let req_name = req_body.name;\r",
							"\r",
							"pm.test(\"Check name response is name request\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let resp_age = resp_body.age\r",
							"let req_age = req_body.age\r",
							"\r",
							"pm.test(\"Check age response is age request\", function () {\r",
							"    pm.expect(resp_age).to.eql(+req_age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"let req_salary = req_body.salary\r",
							"console.log(req_salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"let resp_salary = resp_body.salary\r",
							"console.log(resp_salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_salary[0])\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0th param salary is salary from request\", function () {\r",
							"    pm.expect(resp_salary[0]).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1th param salary is salary*2 from request\", function () {\r",
							"    pm.expect(1 * resp_salary[1]).to.eql(+req_salary * 2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2th param salary is salary*3 from request\", function () {\r",
							"    pm.expect(1 * resp_salary[2]).to.eql(+req_salary * 3);\r",
							"});\r",
							"//Создать в окружении переменную name\r",
							"//Создать в окружении переменную age\r",
							"//Создать в окружении переменную salary\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name_varable\", req_name);\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"name_varable\", req_age);\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"name_varable\", req_salary);\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"//for (let i = 0; i < resp_body.salary.length; i++) {\r",
							"//console.log (resp_body.salary[i])\r",
							"//}\r",
							"\r",
							"//for(let i in resp_body.salary){\r",
							"//console.log(i, resp_body.salary[i])\r",
							"//}\r",
							"\r",
							"//for (let i in resp_body.salary){\r",
							"//console.log(resp_body.salary[i])\r",
							"//}\r",
							"\r",
							"console.log (\"===================\")\r",
							"for (let i in resp_salary){\r",
							"console.log(resp_salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Via",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "32",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//Вставить параметр age из окружения в age\r",
							"//Вставить параметр name из окружения в name\r",
							"//Отправить запрос.\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let resp_body = pm.response.json()\r",
							"\r",
							"//Спарсить request.\r",
							"let req_body = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check json response have start_qa_salary\", function () {\r",
							"    pm.expect(resp_body.start_qa_salary).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check json response have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_body.qa_salary_after_6_months).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check json response have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_body.qa_salary_after_12_months).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check json response have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_body[\"qa_salary_after_1.5_year\"]).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check json response have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_body[\"qa_salary_after_3.5_years\"]).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check json response have person\", function () {\r",
							"    pm.expect(resp_body.person).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +req_body.salary;\r",
							"pm.test(\"Check start_qa_salary is salary from request\", function () {\r",
							"    pm.expect(resp_body.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months is salary*2 from request\", function () {\r",
							"    pm.expect(resp_body.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months is salary*2.7 from request\", function () {\r",
							"    pm.expect(resp_body.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year is salary*3.3 from request\", function () {\r",
							"    pm.expect(resp_body[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years is salary*3.8 from request\", function () {\r",
							"    pm.expect(resp_body[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check person 1th from u_name is salary from request\", function () {\r",
							"    pm.expect(resp_body.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age is age from request\", function () {\r",
							"    pm.expect(resp_body.person.u_age).to.eql(1*req_body.age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years is salary*4.2 from request\", function () {\r",
							"    pm.expect(resp_body.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in resp_body.person) {\r",
							"    console.log (\"Elements from person: \", i);\r",
							"};\r",
							"\r",
							"//****Написать цикл который выведет в консоль по порядку значения элементов списка из параметра person.\r",
							"for (let i in resp_body.person) {\r",
							"    console.log (\"Elements from person: \", resp_body.person[i]);\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}